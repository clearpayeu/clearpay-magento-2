type Mutation {
    createClearpayCheckout(input: createClearpayCheckoutInput): createClearpayCheckoutOutput @resolver(class: "\\Clearpay\\Clearpay\\Model\\GraphQl\\Resolver\\CreateClearpayCheckout") @doc(description:"Creates an Clearpay Checkout.")
    getClearpayConfigPdp(input: getClearpayConfigPdpInput): clearpayConfigPdpOutput @resolver(class: "Clearpay\\Clearpay\\Model\\GraphQl\\Resolver\\ClearpayConfigPdp") @doc(description:"return Clearpay PDP config")
    getClearpayConfigCart(input: getClearpayConfigCartInput): clearpayConfigCartOutput @resolver(class: "Clearpay\\Clearpay\\Model\\GraphQl\\Resolver\\ClearpayConfigCart") @doc(description:"return Clearpay Cart config")
    getClearpayConfigMiniCart(input: getClearpayConfigCartInput): clearpayConfigMiniCartOutput @resolver(class: "Clearpay\\Clearpay\\Model\\GraphQl\\Resolver\\ClearpayConfigMiniCart") @doc(description:"return Clearpay Mini Cart config")

}

input createClearpayCheckoutInput {
    cart_id: String!
    redirect_path: ClearpayRedirectPathInput! @doc(description:"A set of relative URLs that Clearpay uses in response to various actions during the authorization process")
}

input ClearpayRedirectPathInput @doc(description:"A set of relative URLs that Clearpay will use in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html.") {
    confirm_path: String! @doc(description:"The relative URL of the final confirmation page that Clearpay will redirect to upon payment success. If the full URL to this page is https://www.example.com/clearpay/payment/success, the relative URL is clearpay/payment/success.")
    cancel_path: String! @doc(description:"The relative URL of the page that Clearpay will redirect to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/clearpay/payment/cancel, the relative URL is clearpay/payment/cancel.")
}

type createClearpayCheckoutOutput {
    clearpay_token: String! @doc(description: "Clearpay checkout token to be used to complete payment.")
    clearpay_expires: String! @doc(description: "The UTC timestamp of when the checkout token will expire, in ISO 8601 format.")
    clearpay_redirectCheckoutUrl: String! @doc(description: "A URL that can be used to redirect the consumer to the Clearpay screenflow.")
}

input PaymentMethodInput {
    clearpay: ClearpayInput @doc(description: "Required input for Clearpay payment")
}

input ClearpayInput {
    clearpay_token: String! @doc(description:"Clearpay checkout token returned by the createClearpayCheckout mutation")
}

type Query {
    clearpayConfig: clearpayConfigOutput @resolver(class: "Clearpay\\Clearpay\\Model\\GraphQl\\Resolver\\ClearpayConfig") @doc(description:"return Clearpay config")
}

input getClearpayConfigPdpInput {
    store_id: String!
    product_sku: String!
}

input getClearpayConfigCartInput {
    store_id: String!
    cart_id: String!
}

type clearpayConfigOutput {
    max_amount: String
    min_amount: String
    allowed_currencies: [String]
    is_enabled: Boolean
    is_enabled_cta_pdp: Boolean
    is_enabled_cta_minicart: Boolean
    is_enabled_cta_checkout: Boolean
    api_mode: String
    mpid: String
}

type clearpayConfigPdpOutput {
    max_amount: String
    min_amount: String
    allowed_currencies: [String]
    is_enabled: Boolean
    api_mode: String
    mpid: String
    is_enabled_cta_pdp_headless: Boolean
    is_enabled_ec_pdp_headless: Boolean
    product_type: String
    show_lover_limit: Boolean
    is_product_allowed: Boolean
    is_cbt_enabled: Boolean
    placement_after_selector: String
    placement_after_selector_bundle: String
    price_selector: String
    price_selector_bundle: String
    is_in_stock: Boolean
}

type clearpayConfigCartOutput {
    allowed_currencies: [String]
    is_enabled: Boolean
    mpid: String
    is_enabled_cta_cart_page_headless: Boolean
    is_enabled_ec_cart_page_headless: Boolean
    show_lover_limit: Boolean
    is_product_allowed: Boolean
    is_cbt_enabled: Boolean
    placement_after_selector: String
    price_selector: String
    max_amount: String
    min_amount: String
    is_virtual: Boolean
}

type clearpayConfigMiniCartOutput {
    allowed_currencies: [String]
    is_enabled: Boolean
    mpid: String
    is_enabled_cta_minicart_headless: Boolean
    is_enabled_ec_minicart_headless: Boolean
    show_lover_limit: Boolean
    is_product_allowed: Boolean
    is_cbt_enabled: Boolean
    placement_wrapper: String
    placement_after_selector: String
    price_selector: String
    max_amount: String
    min_amount: String
    is_virtual: Boolean
}
